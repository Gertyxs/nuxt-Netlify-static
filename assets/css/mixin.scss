// 文字行数
@mixin line($num: 1) {
  display: -webkit-box !important;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $num;
  overflow: hidden;
  word-wrap: break-word;
  word-break: break-all;
}

// 文本两边对齐
@mixin tj {
  text-align: justify;
  text-justify: inter-ideograph;
  word-wrap: break-word;
  word-break: break-all;
}

@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-align-center() {
  display: flex;
  flex-flow: column;
  align-items: center;
  justify-content: center;
}

@mixin full-page() {
  width: 100vw;
  height: 100vh;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

@mixin ell() {
  word-break: break-all;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 1;
  overflow: hidden;
}

// 多行超出省略号
@mixin ell2() {
  word-break: break-all;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;
}

//.arrow{
// @include arrow(bottom,10px,#F00);
//
@mixin arrow($direction, $size, $color) {
  width: 0;
  height: 0;
  line-height: 0;
  font-size: 0;
  overflow: hidden;
  border-width: $size;
  cursor: pointer;

  @if $direction==top {
    border-style: dashed dashed solid dashed;
    border-color: transparent transparent $color transparent;
    border-top: none;
  } @else if $direction==bottom {
    border-style: solid dashed dashed dashed;
    border-color: $color transparent transparent transparent;
    border-bottom: none;
  } @else if $direction==right {
    border-style: dashed dashed dashed solid;
    border-color: transparent transparent transparent $color;
    border-right: none;
  } @else if $direction==left {
    border-style: dashed solid dashed dashed;
    border-color: transparent $color transparent transparent;
    border-left: none;
  }
}

// clearfix
@mixin clr {
  &:after {
    clear: both;
    content: '.';
    display: block;
    height: 0;
    line-height: 0;
    overflow: hidden;
  }

  *height: 1%;
}

/*渐变(从上到下）*/
@mixin linear-gradient(
  $direction: bottom,
  $color1: transparent,
  $color2: #306eff,
  $color3: transparent
) {
  //background: -webkit-linear-gradient($direction,$colorTop, $colorCenter, $colorBottom); /* Safari 5.1 - 6.0 */
  background: -o-linear-gradient($direction, $color1, $color2, $color3);
  /* Opera 11.1 - 12.0 */
  background: -moz-linear-gradient($direction, $color1, $color2, $color3);
  /* Firefox 3.6 - 15 */
  background: linear-gradient(to $direction, $color1, $color2, $color3);
  /* 标准的语法 */
}

/* 行高 */
@mixin line-height($height: 30px, $line-height: 30px) {
  @if ($height !=null) {
    height: $height;
  }

  @if ($line-height !=null) {
    line-height: $line-height;
  }
}

/* 定义滚动条样式 圆角和阴影不需要则传入null */
@mixin scrollBar(
  $width: 10px,
  $height: 10px,
  $outColor: $bgColor,
  $innerColor: $bgGrey,
  $radius: 5px,
  $shadow: null
) {
  /*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/
  &::-webkit-scrollbar {
    width: $width;
    height: $height;
    background-color: $outColor;
  }

  /*定义滚动条轨道 内阴影+圆角*/
  &::-webkit-scrollbar-track {
    @if ($shadow !=null) {
      -webkit-box-shadow: $shadow;
    }

    @if ($radius !=null) {
      border-radius: $radius;
    }

    background-color: $outColor;
  }

  /*定义滑块 内阴影+圆角*/
  &::-webkit-scrollbar-thumb {
    @if ($shadow !=null) {
      -webkit-box-shadow: $shadow;
    }

    @if ($radius !=null) {
      border-radius: $radius;
    }

    background-color: $innerColor;
    border: 1px solid $innerColor;
  }
}

@mixin disabeld-adjust-font-size {
  -webkit-text-size-adjust: none;
}

// mixins should be separated out
@mixin ball-pulse($n: 3, $start: 1) {
  @for $i from $start through $n {
    > div:nth-child(#{$i}) {
      animation: scale
        0.75s
        delay(0.12s, $n, $i)
        infinite
        cubic-bezier(0.2, 0.68, 0.18, 1.08);
    }
  }
}

@mixin square {
  width: 100%;
  padding-top: 100%; /* 1:1 Aspect Ratio */
  position: relative; /* If you want text inside of it */
}

// 计算并设置安全区域距离
@mixin safe-area(
  $attrs: padding-bottom,
  $position: safe-area-inset-bottom,
  $offset: 0px
) {
  #{$attrs}: calc(constant(#{$position}) + #{$offset});
  #{$attrs}: calc(env(#{$position}) + #{$offset});
}
